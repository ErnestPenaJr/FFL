-- MySql version
CREATE TABLE FELLOWSHIP_LEDGER (
    EntryID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Transaction_Date DATE,
    JournalNumber VARCHAR(5),
    Description TEXT,
    CFS VARCHAR(100),
    Category VARCHAR(100),
    Amount VARCHAR(50),
    PaymentMethod VARCHAR(50),
    VendorSupplier VARCHAR(50),
    VendorID VARCHAR(50),
    ReceiptInvoice VARCHAR(50),
    BeginningBalance VARCHAR(50),
    EncumberedBalance VARCHAR(50),
    CurrentBalance VARCHAR(50),
    ReconStatusID VARCHAR(10),
    ReconDate DATE,
    ReconNotes VARCHAR(255),
    Beginning_Balance VARCHAR(50),
    Encumbered_Balance VARCHAR(50),
    CurrentBalance VARCHAR(50),
    ClassCode VARCHAR(50),
    Effective_date DATE,
    Purchase_order VARCHAR(50),
    ReconNotification VARCHAR(50),
    Pool VARCHAR(50),
    createdbyid VARCHAR(50),
    createdbydate DATE,
    modifiedbyid VARCHAR(50),
    modifiedbydate DATE
);
-- Oracle version
create table FELLOWSHIP_LEDGER (
	EntryID INT,
	Transaction_Date DATE,
	JournalNumber VARCHAR(5),
	Description TEXT,
	CFS VARCHAR(100),
	Category VARCHAR(100),
	Amount VARCHAR(50),
	PaymentMethod VARCHAR(50),
	VendorSupplier VARCHAR(50),
	VendorID VARCHAR(50),
	ReceiptInvoice VARCHAR(50),
	BeginningBalance VARCHAR(50),
	EncumberedBalance VARCHAR(50),
	CurrentBalance VARCHAR(50),
	ReconStatusID VARCHAR(10),
	ReconDate DATE,
	ReconNotes VARCHAR(255),
	Beginning_Balance VARCHAR(50),
	Encumbered_Balance VARCHAR(50),
	CurrentBalance VARCHAR(50),
	ClassCode VARCHAR(50),
	Effective_date DATE,
	Purchase_order VARCHAR(50),
	ReconNotification VARCHAR(50),
	Pool VARCHAR(50),
	createdbyid VARCHAR(50),
	createdbydate DATE,
	modifiedbyid VARCHAR(50),
	modifiedbydate DATE
);
CREATE SEQUENCE FELLOWSHIP_LEDGERSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER FELLOWSHIP_LEDGERTrigger
BEFORE INSERT ON FELLOWSHIP_LEDGER
FOR EACH ROW
BEGIN
  IF :NEW.EntryID IS NULL THEN
	SELECT FELLOWSHIP_LEDGERSeq.NEXTVAL INTO :NEW.EntryID FROM dual;
  END IF;
END;
/

-- MySql version
CREATE TABLE CheckBook (
    ID       INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Emplid     VARCHAR(100) NOT NULL,
    EffectiveDate  DATE NOT NULL,
    Cfs            VARCHAR(200),
    Emplid         VARCHAR(50),
    Fund           VARCHAR(50),
    Account        VARCHAR(50),
    Amount         DECIMAL(15, 2),   -- assuming currency; adjust precision/scale as needed
    PurchaseOrder  VARCHAR(100),
    Notes          TEXT,
    Reconciled     CHAR(1) DEFAULT 'N' CHECK (Reconciled IN ('Y', 'N')), -- 'Y' for Yes, 'N' for No
    EnteredById    INT(10) UNSIGNED,
    CreatedByDate  DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedById    INT(10) UNSIGNED,
    UpdatedDate    DATETIME ON UPDATE CURRENT_TIMESTAMP
);

-- MySql version
CREATE TABLE VendorTransaction (
    VendorID       INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    VendorName     VARCHAR(100) NOT NULL,
    EffectiveDate  DATE NOT NULL,
    Cfs            VARCHAR(200),
    Emplid         VARCHAR(50),
    Fund           VARCHAR(50),
    Account        VARCHAR(50),
    Amount         DECIMAL(15, 2),   -- assuming currency; adjust precision/scale as needed
    PurchaseOrder  VARCHAR(100),
    Notes          TEXT,
    Reconciled     CHAR(1) DEFAULT 'N' CHECK (Reconciled IN ('Y', 'N')), -- 'Y' for Yes, 'N' for No
    EnteredById    INT(10) UNSIGNED,
    CreatedByDate  DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedById    INT(10) UNSIGNED,
    UpdatedDate    DATETIME ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE VendorTransaction
ADD CONSTRAINT fk_vendor
FOREIGN KEY (VendorID) REFERENCES Vendor(vendor_id);
-- Oracle version
CREATE TABLE VendorTransaction (
    ID             NUMBER(10) PRIMARY KEY,
    VendorName     VARCHAR2(100) NOT NULL,
    VendorID       NUMBER(10) REFERENCES Vendor(vendor_id),
    EffectiveDate  DATE NOT NULL,
    CMEItem        VARCHAR2(200),
    Fund           VARCHAR2(50),
    Account        VARCHAR2(50),
    Amount         NUMBER(15, 2),   -- assuming currency; adjust precision/scale as needed
    ClassCode      VARCHAR2(50),
    PurchaseOrder  VARCHAR2(100),
    Notes          VARCHAR2(500),
    Reconciled     CHAR(1) DEFAULT 'N' CHECK (Reconciled IN ('Y', 'N')), -- 'Y' for Yes, 'N' for No
    EnteredById    NUMBER(10),
    Createdbydate      DATE DEFAULT SYSDATE,
    UpdatedById    NUMBER(10),
    UpdatedDate    DATE
);
CREATE SEQUENCE VendorTransactionSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER VendorTransactionTrigger
BEFORE INSERT ON VendorTransaction
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
	SELECT VendorTransactionSeq.NEXTVAL INTO :NEW.ID FROM dual;
  END IF;
END;
/

-- MySql version
CREATE TABLE Vendor (
    id     INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    vendor_name   VARCHAR(100) NOT NULL,
    emplid        VARCHAR(15),
    effective_date DATE,
    amount         DECIMAL(15, 2),   -- assuming currency; adjust precision/scale as needed
    fund         VARCHAR(50),
    expense_type  VARCHAR(50),
    expense_date  DATE,
    requisition_date date,
    description   VARCHAR(500)
);
-- Oracle version
CREATE TABLE Vendor (
    vendor_id     NUMBER(10) PRIMARY KEY,
    vendor_name   VARCHAR2(100) NOT NULL,
    description     VARCHAR2(500)
);

-- MySql version
CREATE TABLE Category (
    category_id     INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    category_name   VARCHAR(100) NOT NULL,
    description     VARCHAR(500)
);
-- Oracle version
CREATE TABLE Category (
    category_id     NUMBER(10) PRIMARY KEY,
    category_name   VARCHAR2(100) NOT NULL,
    description     VARCHAR2(500)
);
CREATE SEQUENCE CategorySeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER CategoryTrigger
BEFORE INSERT ON Category
FOR EACH ROW
BEGIN
  IF :NEW.category_id IS NULL THEN
    SELECT CategorySeq.NEXTVAL INTO :NEW.category_id FROM dual;
  END IF;
END;
/
-- MySql version
CREATE TABLE Fund (
	Fund_id     INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Fund_name   VARCHAR(100) NOT NULL,
	description     VARCHAR(500)
);
-- Oracle version
CREATE TABLE Fund (
	Fund_id     NUMBER(10) PRIMARY KEY,
	Fund_name   VARCHAR2(100) NOT NULL,
	description     VARCHAR2(500)
);
CREATE SEQUENCE FundSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER FundTrigger
BEFORE INSERT ON Fund
FOR EACH ROW
BEGIN
  IF :NEW.Fund_id IS NULL THEN
	SELECT FundSeq.NEXTVAL INTO :NEW.Fund_id FROM dual;
  END IF;
END;
/
-- MySql version
CREATE TABLE Account (
	account_id     INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	account_name   VARCHAR(100) NOT NULL,
	description     VARCHAR(500)
);
-- Oracle version
CREATE TABLE Account (
	account_id     NUMBER(10) PRIMARY KEY,
	account_name   VARCHAR2(100) NOT NULL,
	description     VARCHAR2(500)
);
CREATE SEQUENCE AccountSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER AccountTrigger
BEFORE INSERT ON Account
FOR EACH ROW
BEGIN
  IF :NEW.account_id IS NULL THEN
	SELECT AccountSeq.NEXTVAL INTO :NEW.account_id FROM dual;
  END IF;
END;
/
-- MySql version
CREATE TABLE ClassCode (
	classcode_id     INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	classcode_name   VARCHAR(100) NOT NULL,
	description     VARCHAR(500)
);
-- Oracle version
CREATE TABLE ClassCode (
	classcode_id     NUMBER(10) PRIMARY KEY,
	classcode_name   VARCHAR2(100) NOT NULL,
	description     VARCHAR2(500)
);
CREATE SEQUENCE ClassCodeSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER ClassCodeTrigger
BEFORE INSERT ON ClassCode
FOR EACH ROW
BEGIN
  IF :NEW.classcode_id IS NULL THEN
	SELECT ClassCodeSeq.NEXTVAL INTO :NEW.classcode_id FROM dual;
  END IF;
END;

-- MySql version
CREATE TABLE FFL (
  FFL_ID     INT(10) UNSIGNED PRIMARY KEY,
  JOURNALNUMBER     VARCHAR(6) NOT NULL,
  TRANSACTION_DATE   DATE NOT NULL,
  TRANSACTION_TYPE   VARCHAR(100) NOT NULL,
  VENDOR_ID   VARCHAR(100) NOT NULL,
  VENDOR_NAME   VARCHAR(100) NOT NULL,
  EMPLID   VARCHAR(100) NOT NULL,
  PURCHASE_AMOUNT   DECIMAL(15, 2),   -- assuming currency; adjust precision/scale as needed
  DEPTID   VARCHAR(100) NOT NULL,
  FUND_GROUP   VARCHAR(100) NOT NULL,
  FUND_TYPE   VARCHAR(100) NOT NULL,
  FUND   VARCHAR(100) NOT NULL,
  PROJECT   VARCHAR(100) NOT NULL,
  ACCOUNT   VARCHAR(100) NOT NULL,
  PAYMENT_TYPE   VARCHAR(100) NOT NULL,
  REQUISITION_NUM   VARCHAR(100) NOT NULL,
  PO   VARCHAR(100) NOT NULL,
  DESCRIPTION   VARCHAR(500) NOT NULL,
  RECEIPTS   CHAR(1) DEFAULT 'N' CHECK (Reconciled IN ('Y', 'N')), -- 'Y' for Yes, 'N' for No
  RECONCILED   VARCHAR(100) NOT NULL,
  RECONCILED_DATE   DATE NOT NULL,
  RECONCILED_NOTES   VARCHAR(500) NOT NULL,
  STATUS   CHAR(1) DEFAULT 'A' CHECK (Reconciled IN ('A', 'R', 'D')), -- 'A' for Active, 'R' for Reconciled, 'D' for Deleted
  CREATEDBYID VARCHAR(50),
  CREATEDBYDATE DATETIME DEFAULT CURRENT_TIMESTAMP,
  MODIFIEDBYID VARCHAR(50),
  MODIFIEDBYDATE DATETIME ON UPDATE CURRENT_TIMESTAMP
);
-- Oracle version
CREATE TABLE FFL (
  FFL_ID     NUMBER(10) PRIMARY KEY,
  JOURNALNUMBER     VARCHAR2(6) NOT NULL,
  TRANSACTION_DATE   DATE NOT NULL,
  TRANSACTION_TYPE   VARCHAR2(100) NOT NULL,
  VENDOR_ID   VARCHAR2(100) NOT NULL,
  VENDOR_NAME   VARCHAR2(100) NOT NULL,
  EMPLID   VARCHAR2(100) NOT NULL,
  PURCHASE_AMOUNT   NUMBER(15, 2),   -- assuming currency; adjust precision/scale as needed
  DEPTID   VARCHAR2(100) NOT NULL,
  FUND_GROUP   VARCHAR2(100) NOT NULL,
  FUND_TYPE   VARCHAR2(100) NOT NULL,
  FUND   VARCHAR2(100) NOT NULL,
  PROJECT   VARCHAR2(100) NOT NULL,
  ACCOUNT   VARCHAR2(100) NOT NULL,
  PAYMENT_TYPE   VARCHAR2(100) NOT NULL,
  REQUISITION_NUM   VARCHAR2(100) NOT NULL,
  PO   VARCHAR2(100) NOT NULL,
  DESCRIPTION   VARCHAR2(500) NOT NULL,
  RECEIPTS   VARCHAR2(100) NOT NULL,
  RECONCILED   CHAR(1) DEFAULT 'A' CHECK (Reconciled IN ('A', 'R', 'D')), -- 'A' for Active, 'R' for Reconciled, 'D' for Deleted
  RECONCILED_DATE   DATE NOT NULL,
  RECONCILED_NOTES   VARCHAR2(500) NOT NULL,
  CREATEDBYID VARCHAR(50),
  CREATEDBYDATE DATETIME DEFAULT SYSDATE() ,
  MODIFIEDBYID VARCHAR(50),
  MODIFIEDBYDATE DATE
);

CREATE SEQUENCE FELLOWSHIP_LEDGERSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER FELLOWSHIP_LEDGERTrigger
BEFORE INSERT ON FELLOWSHIP_LEDGER
FOR EACH ROW
BEGIN
  IF :NEW.FFL_ID IS NULL THEN
  SELECT FELLOWSHIP_LEDGERSeq.NEXTVAL INTO :NEW.FFL_ID FROM dual;
  END IF;
END;

-- MySql version
CREATE TABLE GENERAL_LEDGER_CHART_ACCOUNTS (
	ACCOUNT     INT(10) UNSIGNED PRIMARY KEY,
  EFF_DATE   DATE NOT NULL,
  SHORT_DESC   VARCHAR(100) NOT NULL,
  SMALL_NAME   VARCHAR(100) NOT NULL,
  DESCRIPTION     VARCHAR(500),
  ACCOUNT_OWNER   VARCHAR(100) NOT NULL,
  GL_ACCOUNT   VARCHAR(100) NOT NULL,
  ACCOUNT_TYPE   VARCHAR(100) NOT NULL,
  SETID   VARCHAR(100) NOT NULL,
  STATUS   VARCHAR(100) NOT NULL,
  CREATEDBYID VARCHAR(50),
  CREATEDBYDATE DATETIME DEFAULT CURRENT_TIMESTAMP,
  MODIFIEDBYID VARCHAR(50),
  MODIFIEDBYDATE DATETIME ON UPDATE CURRENT_TIMESTAMP
);
-- Oracle version
CREATE TABLE GENERAL_LEDGER_CHART_ACCOUNTS (
  ACCOUNT     NUMBER(10) PRIMARY KEY,
  EFF_DATE   DATE NOT NULL,
  SHORT_DESC   VARCHAR2(100) NOT NULL,
  SMALL_NAME   VARCHAR2(100) NOT NULL,
  DESCRIPTION     VARCHAR2(500),
  ACCOUNT_OWNER   VARCHAR2(100) NOT NULL,
  GL_ACCOUNT   VARCHAR2(100) NOT NULL,
  ACCOUNT_TYPE   VARCHAR2(100) NOT NULL,
  SETID   VARCHAR2(100) NOT NULL,
  STATUS   VARCHAR2(100) NOT NULL,
  CREATEDBYID VARCHAR(50),
  CREATEDBYDATE DATE DEFAULT SYSDATE() ,
  MODIFIEDBYID VARCHAR(50),
  MODIFIEDBYDATE DATE
);
CREATE SEQUENCE ENDOWMENT_ACCOUNTSSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER ENDOWMENT_ACCOUNTSTrigger
BEFORE INSERT ON ENDOWMENT_ACCOUNTS
FOR EACH ROW
BEGIN
  IF :NEW.ACCOUNT IS NULL THEN
  SELECT ENDOWMENT_ACCOUNTSSeq.NEXTVAL INTO :NEW.ACCOUNT FROM dual;
  END IF;
END;


-- MySql version
CREATE TABLE ENDOWMENT_ACCOUNTS (
	EA_ID     INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  STEWARD_NAME   VARCHAR(100) NOT NULL,
	DEPTID   VARCHAR(100) NOT NULL,
  FG   VARCHAR(2) NOT NULL,
  FUND_PROJECT   VARCHAR(500) NOT NULL,
	DONOR_RESTRICTION     VARCHAR(500),
  FT   VARCHAR(2) NOT NULL,
  BEGINNING_BALANCE   DECIMAL(15, 2),
  TOTAL_EXPENSES   DECIMAL(15, 2),
  CURRENT_BALANCE   DECIMAL(15, 2),
  ENCUMBERED_BALANCE   DECIMAL(15, 2),
  FREE_BALANCE   DECIMAL(15, 2),
  NET_BALANCE   DECIMAL(15, 2),
  CREATEDBYID VARCHAR(50),
  CREATEDBYDATE DATETIME DEFAULT CURRENT_TIMESTAMP,
  MODIFIEDBYID VARCHAR(50),
  MODIFIEDBYDATE DATETIME ON UPDATE CURRENT_TIMESTAMP
);
-- Oracle version
CREATE TABLE ENDOWMENT_ACCOUNTS (
  EA_ID     NUMBER(10) PRIMARY KEY,
  STEWARD_NAME   VARCHAR2(100) NOT NULL,
  DEPTID   VARCHAR2(100) NOT NULL,
  FG   VARCHAR2(2) NOT NULL,
  FUND_PROJECT   VARCHAR2(500) NOT NULL,
  DONOR_RESTRICTION     VARCHAR2(500),
  FT   VARCHAR2(2) NOT NULL,
  BEGINNING_BALANCE   NUMBER(15, 2),
  TOTAL_EXPENSES   NUMBER(15, 2),
  CURRENT_BALANCE   NUMBER(15, 2),
  ENCUMBERED_BALANCE   NUMBER(15, 2),
  FREE_BALANCE   NUMBER(15, 2),
  NET_BALANCE   NUMBER(15, 2),
  CREATEDBYID VARCHAR(50),
  CREATEDBYDATE DATETIME DEFAULT SYSDATE() ,
  MODIFIEDBYID VARCHAR(50),
  MODIFIEDBYDATE DATE
);
CREATE SEQUENCE ENDOWMENT_ACCOUNTSSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER ENDOWMENT_ACCOUNTSTrigger
BEFORE INSERT ON ENDOWMENT_ACCOUNTS
FOR EACH ROW
BEGIN
  IF :NEW.EA_ID IS NULL THEN
  SELECT ENDOWMENT_ACCOUNTSSeq.NEXTVAL INTO :NEW.EA_ID FROM dual;
  END IF;
END;
/

-- MySql version
CREATE TABLE CmeItem (
    cme_id     INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    cme_name   VARCHAR(100) NOT NULL,
    description     VARCHAR(500)
);
-- Oracle version
CREATE TABLE CmeItem (
    cme_id     NUMBER(10) PRIMARY KEY,
    cme_name   VARCHAR2(100) NOT NULL,
    description     VARCHAR2(500)
);
CREATE SEQUENCE CmeItemSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER CmeItemTrigger
BEFORE INSERT ON CmeItem
FOR EACH ROW
BEGIN
  IF :NEW.cme_id IS NULL THEN
	SELECT CmeItemSeq.NEXTVAL INTO :NEW.cme_id FROM dual;
  END IF;
END;
/

CREATE TABLE PaymentType (
    payment_type_id   NUMBER(10) PRIMARY KEY,
    payment_name      VARCHAR2(100) NOT NULL,
    description       VARCHAR2(300)
);
CREATE SEQUENCE PaymentTypeSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER PaymentTypeTrigger
BEFORE INSERT ON PaymentType
FOR EACH ROW
BEGIN
  IF :NEW.payment_type_id IS NULL THEN
	SELECT PaymentTypeSeq.NEXTVAL INTO :NEW.payment_type_id FROM dual;
  END IF;
END;
/

CREATE TABLE ReconStatus (
    Status_id     NUMBER(10) PRIMARY KEY,
    Status_name   VARCHAR2(100) NOT NULL,
    description     VARCHAR2(500)
);
CREATE SEQUENCE ReconStatusSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER ReconStatusTrigger
BEFORE INSERT ON ReconStatus
FOR EACH ROW
BEGIN
  IF :NEW.Status_id IS NULL THEN
	SELECT ReconStatusSeq.NEXTVAL INTO :NEW.Status_id FROM dual;
  END IF;
END;
/

CREATE TABLE Pool (
    Pool_id     NUMBER(10) PRIMARY KEY,
    Pool_name   VARCHAR2(100) NOT NULL,
    description     VARCHAR2(500)
);
CREATE SEQUENCE PoolSeq START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER PoolTrigger
BEFORE INSERT ON Pool
FOR EACH ROW
BEGIN
  IF :NEW.Pool_id IS NULL THEN
	SELECT PoolSeq.NEXTVAL INTO :NEW.Pool_id FROM dual;
  END IF;
END;
/
CREATE TABLE UserAccess (
	Userid     NUMBER(10) PRIMARY KEY,
	emplid   VARCHAR2(15) NOT NULL,
	allowaccess     CHAR(1) DEFAULT 'N' CHECK (Reconciled IN ('Y', 'N')), -- 'Y' for Yes, 'N' for No
	lastloginDate DATE,
	createdbyid VARCHAR(50),
	createdbydate DATE,
	modifiedbyid VARCHAR(50),
	modifiedbydate DATE
);